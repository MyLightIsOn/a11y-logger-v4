# VPAT Generator — Implementation Plan (developer runbook)

Last updated: 2025-09-07
Owner: Engineering (primary implementer)
Scope: Translate vpat-engineering-plan.md into granular, sequential tasks with clear acceptance criteria. Keep tasks small (1–4h) and reuse existing patterns.

Conventions
- Tech stack: Next.js App Router, TypeScript, Supabase (PostgREST + RLS), Edge Functions for service-role.
- Reuse: lib/api/BaseApiService, React Query hook patterns under lib/query, shared UI components.
- Abbrev: AC = Acceptance Criteria, Dep = Dependencies.

---

Milestone 1 — Data + REST skeleton
Goal: CRUD draft VPATs + rows via PostgREST proxies; no AI/publish yet.

1. Scaffold API service wrapper (lib/api/vpats.ts)
   - Create VpatsApiService extending BaseApiService with basePath "/vpats".
   - Methods: create, listByProject, get, update, getRows, saveRow, validate (stub), listVersions, getVersion.
   - AC: Type-safe methods compile; no routes required yet.
   - Dep: BaseApiService.

2. App API routes: /api/vpats (create, list)
   - Implement POST /api/vpats (create draft: projectId,title,description?) → insert into vpat.
   - Implement GET /api/vpats?projectId=... → read from view v_vpat_current.
   - AC: Curlable locally; returns 200 with expected payload shape.
   - Dep: data/db-schemas deployed; Supabase client setup.

3. App API routes: /api/vpats/[vpatId] (get, update)
   - GET → select vpat by id.
   - PUT → patch title, description only; enforce status remains draft.
   - AC: Update reflects in DB; updated_at changes.

4. App API routes: /api/vpats/[vpatId]/rows (get rows)
   - GET → select vpat_row_draft by vpat_id.
   - AC: Returns [] when none.

5. App API routes: /api/vpats/[vpatId]/rows/[criterionId] (save/clear)
   - PUT body: { conformance|null, remarks|null, related_issue_ids?, related_issue_urls? }.
   - Upsert by (vpat_id,wcag_criterion_id), set last_edited_by to auth user.
   - AC: Creates or updates; null clears; respects RLS.

6. App API routes: versions (list/get)
   - GET /api/vpats/[vpatId]/versions → vpat_version by vpat_id.
   - GET /api/vpat_versions/[versionId] → fetch one version.
   - AC: Returns empty list/no content if none.

7. Wire client wrapper to routes
   - Connect VpatsApiService methods to the above API endpoints.
   - AC: Manual call in a temp script or page logs results.

8. Minimal hooks
   - Implement useVpatsList(projectId), useVpatDraft(vpatId), useSaveVpatRow, useVpatVersions, useGetVersion.
   - AC: Hooks fetch data without UI.

Milestone 2 — UI: List + Create + Editor (manual editing)
Goal: Render numeric table and enable manual row save/clear.

9. Page: /vpats (list)
   - Card grid of VPATs; fetch listByProject via hook.
   - Columns: Title, Description (first line), Status, Version/PublishedAt, UpdatedAt; CTA Create VPAT.
   - AC: Handles empty state; errors visible.

10. Page: /vpats/new (create)
   - Simple form: Project selector (reuse existing project picker), Title, Description.
   - On submit: POST then redirect to /vpats/{id}.
   - AC: Validation for required title/project; show server errors.

11. Utility: wcag numeric sort + data source
   - Add lib/vpat/utils.ts: parse/sort wcag codes (e.g., 1.4.13 → [1,4,13]).
   - Data source: reuse lib/wcag/reference to list all criteria with code, name, level.
   - AC: Sorting stable and correct across 2.0/2.1/2.2.

12. Page: /vpats/[vpatId] editor — skeleton
   - Header with Title (editable), Description (editable), Scope summary (read-only placeholder).
   - Table rendering all wcag_criteria numerically; each row shows: criterion code+name, Conformance select, Remarks textarea, Issues placeholder, Actions Save/Clear/Generate (Generate disabled this milestone).
   - AC: Renders all rows; can navigate.

13. Editor: wire draft rows
   - Fetch draft rows via hook; hydrate into table state keyed by criterionId.
   - Show status per row: Empty / Drafted / Edited (client state).
   - AC: Rows with saved content appear populated.

14. Save/Clear row
   - Implement inline save button calling saveRow; Clear sets conformance=null & remarks="".
   - AC: Persisted updates reflect after refetch; updated_at and last_edited_by set.

15. Validation rules (client)
   - Enforce: Not Applicable requires remarks; if value != Supports, remarks required.
   - Show inline messages; disable Save until valid.
   - AC: Attempt to save invalid state shows clear error.

Milestone 3 — AI Generate (single row)
Goal: Implement generation helper and :generate endpoint with no-overwrite guard.

16. Helper module: lib/vpat/generation.ts
   - Function generateForCriterion({ projectId, criterionCode }): returns { conformance, remarks, related_issue_ids, related_issue_urls, warning? } using existing issues APIs and heuristics.
   - AC: Pure function; accepts injected issues list for testability.

17. API route: POST /api/vpats/[vpatId]/rows/[criterionId]:generate
   - Resolve projectId from vpat; fetch open issues mapped to that criterion; call helper.
   - Apply no-overwrite guard:
     - First attempt UPDATE where empty; else INSERT on conflict do nothing.
     - Set last_generated_at, last_edited_by.
   - Return { status: "UPDATED"|"INSERTED"|"SKIPPED", row }.
   - AC: If row already has conformance or remarks, returns SKIPPED and preserves content.

18. Editor integration
   - Enable Generate button per row; show "Generating…" state on that row only.
   - AC: After generate, row fills; button returns.

19. Warnings surfacing
   - If helper returns warning (no mapped issues), show non-blocking banner/toast for that row.
   - AC: UX message visible and dismissible.

Milestone 4 — Generate Next 5 (batch + SSE)
Goal: SSE streaming endpoint and client progress lockout.

20. Client utility: computeNextNEmpty(criteria, draftRows, n=5)
   - Returns ordered criterionIds based on numeric code where draft row empty.
   - AC: Deterministic order unaffected by already-filled rows.

21. API route: POST /api/vpats/[vpatId]:generate_batch (SSE)
   - Accept body { criterionIds: string[] } (or query param); stream events: start, row (updated), skip, error, done.
   - Internally loops and calls single-row generate per criterion, preserving guard.
   - AC: Event stream works in dev; client can parse events.

22. Client hook: useGenerateVpatBatch
   - Wrap EventSource; expose progress map, isRunning, start/abort.
   - AC: Handles reconnect/abort; cleans up on unmount.

23. Editor toolbar integration
   - Add Generate Next 5 button; disables all generate buttons while running; rows in batch show Generating…
   - AC: Visual progress with counts (done/remaining); unlocks as each row completes.

Milestone 5 — Publish + Downloads (Markdown first)
Goal: Publish immutable version and allow Markdown download.

24. Helper: lib/vpat/export.ts (markdown)
   - Function toMarkdown({ wcag_scope, criteria_rows }): returns string; include headings and tables A/AA/AAA.
   - AC: Deterministic output; includes title, version, published date placeholders.

25. API route: POST /api/vpats/[vpatId]:publish
   - Compute wcag_scope from project assessments (reuse existing utilities/data); build criteria_rows by joining drafts with wcag_criteria; fill Not Evaluated where allowed; include AAA rows.
   - Call SQL function publish_vpat(...) → version_id (or implement transaction inline if SQL function TBD).
   - AC: vpat_version row created; vpat.current_version_id set.

26. API route: GET /api/vpat_versions/[versionId]/download?format=md
   - Render Markdown on-demand using export.ts; set appropriate headers; stream response.
   - AC: Browser downloads .md file; content matches criteria_rows.

27. Optional: PDF (time-box)
   - If feasible, add HTML->PDF rendering (wkhtmltopdf/Playwright PDF). Store URL in export_artifacts optionally.
   - AC: Skippable if time exceeds box; leave TODO.

Milestone 6 — Sharing (public/password)
Goal: Share settings and public view via service role.

28. API route: POST /api/vpat_versions/[versionId]:share
   - Upsert into vpat_share: visibility, password (hash with bcrypt if provided), show_issue_links; support revoke.
   - AC: Subsequent GET returns updated settings.

29. Edge Function: public-vpat
   - GET /edge/public/vpats/{versionId}?password=...
   - Validates vpat_share (public/password, not revoked); returns wcag_scope, criteria_rows (filter issue links if toggle off).
   - AC: Public link works for public; password required when set; wrong password yields 403.

30. Public page: /share/vpat/[versionId]
   - SSR/Client hybrid: password form when required, then fetch payload from Edge Function and render read-only VPAT tables; hide issue links if disabled.
   - AC: Works on desktop/mobile; graceful errors.

Milestone 7 — Metrics snapshot on publish
Goal: Append metrics entry when publishing.

31. Metrics computation
   - Compute counts_by_severity, counts_by_wcag_level, open_vs_resolved for the project at publish time (reuse existing stats utilities from assessments/reports).
   - AC: JSON objects populated.

32. Write snapshot
   - Insert into project_accessibility_metrics with notes including { vpat_version_id }.
   - AC: Row appears with snapshot_at ~ now().

---

Cross-cutting tasks

33. Auth and RLS checks
   - Verify all authenticated routes pass user JWT to Supabase PostgREST; deny cross-project access.
   - AC: Attempting to access other users' VPATs returns 403.

34. Error handling and messages
   - Standardize ApiResponse errors in VpatsApiService; surface human-readable messages in UI.
   - AC: Network/server errors show toasts or inline alerts.

35. Accessibility polish in editor
   - Keyboard navigation, ARIA-live for generation progress, focus management on Save/Generate.
   - AC: Basic keyboard-only workflow validated.

36. Documentation updates
   - Update planning/vpat-engineering-plan.md references if implementation deviates; note any SQL function choices.
   - AC: Docs in sync with implementation.

---

Deliverables by milestone
- M1: CRUD APIs, service, hooks; /vpats and /vpats/new baseline; editor skeleton loads rows.
- M2: Manual editing functional with validation.
- M3: Single-row generation with guard; per-row generate UX.
- M4: Next 5 with SSE and global lockout.
- M5: Publish and Markdown download.
- M6: Sharing (settings + public view via Edge Function).
- M7: Metrics snapshot on publish.

Notes
- Keep PRs small per task (<= ~300 LOC when possible).
- Each task should include brief notes in PR description: scope, AC, manual test steps.
